// Code generated by pg_gen, DO NOT EDIT.
package {goPackageName}

import (
	"strconv"
	"strings"
	"database/sql"
)

type Filter struct {
	Column  string
	Operand string
	Value   any
}

func NewFilter(column, operand string, value any) Filter {
	return Filter{
		Column:  column,
		Operand: operand,
		Value:   value,
	}
}

func filtersToQueryPart(filters []Filter) (string, []any) {
	if len(filters) == 0 {
		return "", nil
	}

	var queryBuilder strings.Builder
	queryBuilder.WriteString(" WHERE ")

	var values []any
	for i, filter := range filters {
		queryBuilder.WriteString(filter.Column)
		queryBuilder.WriteString(" ")
		queryBuilder.WriteString(filter.Operand)
		queryBuilder.WriteString(" $")
		queryBuilder.WriteString(strconv.Itoa(i + 1))

		if i < (len(filters) - 1) {
			queryBuilder.WriteString(" AND ")
		}

		values = append(values, filter.Value)
	}

	return queryBuilder.String(), values
}

type Direction struct {
	Column    string
	Direction string
}

type SelectResult[T any] struct {
	Total    uint `json:"total,omitempty"`
	Selected uint `json:"selected,omitempty"`
	Rows     []T  `json:"data,omitempty"`
}

func (sr *SelectResult[T]) First() *T {
	if len(sr.Rows) == 0 {
		return nil
	}

	return &sr.Rows[0]
}

func NewDirection(column, direction string) Direction {
	return Direction{
		Column:    column,
		Direction: direction,
	}
}

type SelectOptions struct {
	Limit   uint
	Offset  uint
	Where   []Filter
	OrderBy []Direction
}

func (so *SelectOptions) toOrderByPart() string {
	if so.OrderBy == nil {
		return ""
	}

	var queryBuilder strings.Builder

	if len(so.OrderBy) > 0 {
		queryBuilder.WriteString(" ORDER BY ")

		for i, direction := range so.OrderBy {
			queryBuilder.WriteString(direction.Column)
			queryBuilder.WriteString(" ")
			queryBuilder.WriteString(direction.Direction)

			if i < (len(so.Where) - 1) {
				queryBuilder.WriteString(", ")
			}
		}
	}

	return queryBuilder.String()
}

func (so *SelectOptions) toLimitOffsetPart() string {
	if so.Limit == 0 {
		return ""
	}

	var queryBuilder strings.Builder

	queryBuilder.WriteString(" LIMIT ")
	queryBuilder.WriteString(strconv.Itoa(int(so.Limit)))

	if so.Offset > 0 {
		queryBuilder.WriteString(" OFFSET ")
		queryBuilder.WriteString(strconv.Itoa(int(so.Offset)))
	}

	return queryBuilder.String()
}

type UpdateOptions struct {
	Where []Filter
}

type DeleteOptions struct {
	Where []Filter
}

func Where(filters ...Filter) []Filter {
	return filters
}

func OrderBy(directions ...Direction) []Direction {
	return directions
}

func Transaction(db *sql.DB, fn func(tx *sql.Tx) error) error {
	tx, err := db.Begin()
	if err != nil {
		return err
	}

	if err := fn(tx); err != nil {
		return tx.Rollback()
	}

	return tx.Commit()
}