// Code generated by pg_gen, DO NOT EDIT.
package {goPackageName}

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

type {goEntityName} struct {
	{goEntityFields}
}

type {goEntityName}DAO struct{}

func ({goEntityName}DAO) Count(ctx context.Context, db *sql.DB, opts *SelectOptions) (uint, error) {
	query := `SELECT count(*) FROM "{sqlTableName}"`

	var values []any
	if opts != nil {
		filterPart, v := opts.toWherePartAndValues()
		if filterPart != "" {
			query += filterPart
		}

		if v != nil {
			values = v
		}
	}

	row := db.QueryRowContext(ctx, query, values...)
	if row.Err() != nil {
		return 0, row.Err()
	}

	var count uint
	if err := row.Scan(&count); err != nil {
		return 0, err
	}

	return count, nil
}

func ({goEntityName}DAO) Select(ctx context.Context, db *sql.DB, opts *SelectOptions) (*SelectResult[{goEntityName}], error) {
	query := `SELECT {sqlSelectFields} FROM "{sqlTableName}"`

	var values []any
	if opts != nil {
		filterPart, v := opts.toWherePartAndValues()
		if filterPart != "" {
			query += filterPart
		}

		if v != nil {
			values = v
		}

		if orderByPart := opts.toOrderByPart(); orderByPart != "" {
			query += orderByPart
		}

		if limitPart := opts.toLimitOffsetPart(); limitPart != "" {
			query += limitPart
		}
	}

	total, err := {goEntityName}DAO{}.Count(ctx, db, opts)
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, values...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	result := &SelectResult[{goEntityName}]{
		Total:    total,
		Selected: 0,
		Rows:     []{goEntityName}{},
	}

	for rows.Next() {
		var entity {goEntityName}
		if err := rows.Scan({goSelectManyScanFields}); err != nil {
			return nil, err
		}

		result.Rows = append(result.Rows, entity)
		result.Selected++
	}

	return result, nil
}

func ({goEntityName}DAO) Insert(ctx context.Context, tx *sql.Tx, values {goEntityName}) error {
	const query = `INSERT INTO "{sqlTableName}" ({sqlInsertFields}) VALUES ({sqlInsertPlaceholders})`

	if _, err := tx.ExecContext(ctx, query, {goInsertValues}); err != nil {
		return err
	}

	return nil
}

func ({goEntityName}DAO) Update(ctx context.Context, tx *sql.Tx, values {goEntityName}, opts *UpdateOptions) error {
	query := `UPDATE "{sqlTableName}" SET {sqlUpdatePlaceholders}`

	queryValues := []any{{goUpdateValues}}
	if opts != nil {
		filterPart, v := opts.toWherePartAndValues()
		if filterPart != "" {
			query += filterPart
		}

		if v != nil {
			queryValues = v
		}
	}

	if _, err := tx.ExecContext(ctx, query, queryValues...); err != nil {
		return err
	}

	return nil
}

func ({goEntityName}DAO) Delete(ctx context.Context, tx *sql.Tx, opts *DeleteOptions) error {
	query := `DELETE FROM "{sqlTableName}"`

	var values []any
	if opts != nil {
		filterPart, v := opts.toWherePartAndValues()
		if filterPart != "" {
			query += filterPart
		}

		if v != nil {
			values = v
		}
	}

	if _, err := tx.ExecContext(ctx, query, values...); err != nil {
		return err
	}

	return nil
}
